// Code generated by re2c, DO NOT EDIT.
// Copyright 2011 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package nin

import (
	"fmt"
	"strings"
)

type Token int32

const (
	ERROR Token = iota
	BUILD
	COLON
	DEFAULT
	EQUALS
	IDENT
	INCLUDE
	INDENT
	NEWLINE
	PIPE
	PIPE2
	PIPEAT
	POOL
	RULE
	SUBNINJA
	TEOF
)

// String() returns a human-readable form of a token, used in error messages.
func (t Token) String() string {
	switch t {
	case ERROR:
		return "lexing error"
	case BUILD:
		return "'build'"
	case COLON:
		return "':'"
	case DEFAULT:
		return "'default'"
	case EQUALS:
		return "'='"
	case IDENT:
		return "identifier"
	case INCLUDE:
		return "'include'"
	case INDENT:
		return "indent"
	case NEWLINE:
		return "newline"
	case PIPE2:
		return "'||'"
	case PIPE:
		return "'|'"
	case PIPEAT:
		return "'|@'"
	case POOL:
		return "'pool'"
	case RULE:
		return "'rule'"
	case SUBNINJA:
		return "'subninja'"
	case TEOF:
		return "eof"
	}
	return "" // not reached
}

type lexer struct {
	filename string
	input    []byte
	// In the original C++ code, these two are char pointers and are used to do
	// pointer arithmetics. Go doesn't allow pointer arithmetics so they are
	// indexes. ofs starts at 0. lastToken is initially -1 to mark that it is
	// not yet set.
	ofs       int
	lastToken int
}

// Construct an error message with context.
func (l *lexer) Error(message string) error {
	// Compute line/column.
	line := 1
	lineStart := 0
	for p := 0; p < l.lastToken; p++ {
		if l.input[p] == '\n' {
			line++
			lineStart = p + 1
		}
	}
	col := 0
	if l.lastToken != -1 {
		col = l.lastToken - lineStart
	}

	// Add some context to the message.
	c := ""
	const truncateColumn = 72
	if col > 0 && col < truncateColumn {
		truncated := true
		length := 0
		for ; length < truncateColumn; length++ {
			if l.input[lineStart+length] == 0 || l.input[lineStart+length] == '\n' {
				truncated = false
				break
			}
		}
		c = unsafeString(l.input[lineStart : lineStart+length])
		if truncated {
			c += "..."
		}
		c += "\n"
		c += strings.Repeat(" ", col)
		c += "^ near here"
	}
	// TODO(maruel): There's a problem where the error is wrapped, thus the alignment doesn't work.
	return fmt.Errorf("%s:%d: %s\n%s", l.filename, line, message, c)
}

// Start parsing some input.
func (l *lexer) Start(filename string, input []byte) {
	l.filename = filename
	if input[len(input)-1] != 0 {
		panic("Requires hack with a trailing 0 byte")
	}
	l.input = input
	l.ofs = 0
	l.lastToken = -1
}

// If the last token read was an ERROR token, provide more info
// or the empty string.
func (l *lexer) DescribeLastError() string {
	if l.lastToken != -1 {
		switch l.input[l.lastToken] {
		case '\t':
			return "tabs are not allowed, use spaces"
		}
	}
	return "lexing error"
}

// Rewind to the last read Token.
func (l *lexer) UnreadToken() {
	l.ofs = l.lastToken
}

func (l *lexer) ReadToken() Token {
	p := l.ofs
	q := 0
	start := 0
	var token Token
	for {
		start = p

		{
			var yych byte
			yyaccept := 0
			yych = l.input[p]
			switch yych {
			case 0x00:
				goto yy2
			case '\n':
				goto yy6
			case '\r':
				goto yy8
			case ' ':
				goto yy9
			case '#':
				goto yy12
			case '-':
				fallthrough
			case '.':
				fallthrough
			case '0':
				fallthrough
			case '1':
				fallthrough
			case '2':
				fallthrough
			case '3':
				fallthrough
			case '4':
				fallthrough
			case '5':
				fallthrough
			case '6':
				fallthrough
			case '7':
				fallthrough
			case '8':
				fallthrough
			case '9':
				fallthrough
			case 'A':
				fallthrough
			case 'B':
				fallthrough
			case 'C':
				fallthrough
			case 'D':
				fallthrough
			case 'E':
				fallthrough
			case 'F':
				fallthrough
			case 'G':
				fallthrough
			case 'H':
				fallthrough
			case 'I':
				fallthrough
			case 'J':
				fallthrough
			case 'K':
				fallthrough
			case 'L':
				fallthrough
			case 'M':
				fallthrough
			case 'N':
				fallthrough
			case 'O':
				fallthrough
			case 'P':
				fallthrough
			case 'Q':
				fallthrough
			case 'R':
				fallthrough
			case 'S':
				fallthrough
			case 'T':
				fallthrough
			case 'U':
				fallthrough
			case 'V':
				fallthrough
			case 'W':
				fallthrough
			case 'X':
				fallthrough
			case 'Y':
				fallthrough
			case 'Z':
				fallthrough
			case '_':
				fallthrough
			case 'a':
				fallthrough
			case 'c':
				fallthrough
			case 'e':
				fallthrough
			case 'f':
				fallthrough
			case 'g':
				fallthrough
			case 'h':
				fallthrough
			case 'j':
				fallthrough
			case 'k':
				fallthrough
			case 'l':
				fallthrough
			case 'm':
				fallthrough
			case 'n':
				fallthrough
			case 'o':
				fallthrough
			case 'q':
				fallthrough
			case 't':
				fallthrough
			case 'u':
				fallthrough
			case 'v':
				fallthrough
			case 'w':
				fallthrough
			case 'x':
				fallthrough
			case 'y':
				fallthrough
			case 'z':
				goto yy13
			case ':':
				goto yy16
			case '=':
				goto yy18
			case 'b':
				goto yy20
			case 'd':
				goto yy21
			case 'i':
				goto yy22
			case 'p':
				goto yy23
			case 'r':
				goto yy24
			case 's':
				goto yy25
			case '|':
				goto yy26
			default:
				goto yy4
			}
		yy2:
			p++
			{
				token = TEOF
				break
			}
		yy4:
			p++
		yy5:
			{
				token = ERROR
				break
			}
		yy6:
			p++
			{
				token = NEWLINE
				break
			}
		yy8:
			p++
			yych = l.input[p]
			switch yych {
			case '\n':
				goto yy28
			default:
				goto yy5
			}
		yy9:
			yyaccept = 0
			p++
			q = p
			yych = l.input[p]
			switch yych {
			case '\n':
				goto yy6
			case '\r':
				goto yy30
			case ' ':
				goto yy9
			case '#':
				goto yy32
			default:
				goto yy11
			}
		yy11:
			{
				token = INDENT
				break
			}
		yy12:
			yyaccept = 1
			p++
			q = p
			yych = l.input[p]
			if yych <= 0x00 {
				goto yy5
			}
			goto yy33
		yy13:
			p++
			yych = l.input[p]
		yy14:
			switch yych {
			case '-':
				fallthrough
			case '.':
				fallthrough
			case '0':
				fallthrough
			case '1':
				fallthrough
			case '2':
				fallthrough
			case '3':
				fallthrough
			case '4':
				fallthrough
			case '5':
				fallthrough
			case '6':
				fallthrough
			case '7':
				fallthrough
			case '8':
				fallthrough
			case '9':
				fallthrough
			case 'A':
				fallthrough
			case 'B':
				fallthrough
			case 'C':
				fallthrough
			case 'D':
				fallthrough
			case 'E':
				fallthrough
			case 'F':
				fallthrough
			case 'G':
				fallthrough
			case 'H':
				fallthrough
			case 'I':
				fallthrough
			case 'J':
				fallthrough
			case 'K':
				fallthrough
			case 'L':
				fallthrough
			case 'M':
				fallthrough
			case 'N':
				fallthrough
			case 'O':
				fallthrough
			case 'P':
				fallthrough
			case 'Q':
				fallthrough
			case 'R':
				fallthrough
			case 'S':
				fallthrough
			case 'T':
				fallthrough
			case 'U':
				fallthrough
			case 'V':
				fallthrough
			case 'W':
				fallthrough
			case 'X':
				fallthrough
			case 'Y':
				fallthrough
			case 'Z':
				fallthrough
			case '_':
				fallthrough
			case 'a':
				fallthrough
			case 'b':
				fallthrough
			case 'c':
				fallthrough
			case 'd':
				fallthrough
			case 'e':
				fallthrough
			case 'f':
				fallthrough
			case 'g':
				fallthrough
			case 'h':
				fallthrough
			case 'i':
				fallthrough
			case 'j':
				fallthrough
			case 'k':
				fallthrough
			case 'l':
				fallthrough
			case 'm':
				fallthrough
			case 'n':
				fallthrough
			case 'o':
				fallthrough
			case 'p':
				fallthrough
			case 'q':
				fallthrough
			case 'r':
				fallthrough
			case 's':
				fallthrough
			case 't':
				fallthrough
			case 'u':
				fallthrough
			case 'v':
				fallthrough
			case 'w':
				fallthrough
			case 'x':
				fallthrough
			case 'y':
				fallthrough
			case 'z':
				goto yy13
			default:
				goto yy15
			}
		yy15:
			{
				token = IDENT
				break
			}
		yy16:
			p++
			{
				token = COLON
				break
			}
		yy18:
			p++
			{
				token = EQUALS
				break
			}
		yy20:
			p++
			yych = l.input[p]
			switch yych {
			case 'u':
				goto yy36
			default:
				goto yy14
			}
		yy21:
			p++
			yych = l.input[p]
			switch yych {
			case 'e':
				goto yy37
			default:
				goto yy14
			}
		yy22:
			p++
			yych = l.input[p]
			switch yych {
			case 'n':
				goto yy38
			default:
				goto yy14
			}
		yy23:
			p++
			yych = l.input[p]
			switch yych {
			case 'o':
				goto yy39
			default:
				goto yy14
			}
		yy24:
			p++
			yych = l.input[p]
			switch yych {
			case 'u':
				goto yy40
			default:
				goto yy14
			}
		yy25:
			p++
			yych = l.input[p]
			switch yych {
			case 'u':
				goto yy41
			default:
				goto yy14
			}
		yy26:
			p++
			yych = l.input[p]
			switch yych {
			case '@':
				goto yy42
			case '|':
				goto yy44
			default:
				goto yy27
			}
		yy27:
			{
				token = PIPE
				break
			}
		yy28:
			p++
			{
				token = NEWLINE
				break
			}
		yy30:
			p++
			yych = l.input[p]
			switch yych {
			case '\n':
				goto yy28
			default:
				goto yy31
			}
		yy31:
			p = q
			if yyaccept == 0 {
				goto yy11
			} else {
				goto yy5
			}
		yy32:
			p++
			yych = l.input[p]
		yy33:
			switch yych {
			case 0x00:
				goto yy31
			case '\n':
				goto yy34
			default:
				goto yy32
			}
		yy34:
			p++
			{
				continue
			}
		yy36:
			p++
			yych = l.input[p]
			switch yych {
			case 'i':
				goto yy46
			default:
				goto yy14
			}
		yy37:
			p++
			yych = l.input[p]
			switch yych {
			case 'f':
				goto yy47
			default:
				goto yy14
			}
		yy38:
			p++
			yych = l.input[p]
			switch yych {
			case 'c':
				goto yy48
			default:
				goto yy14
			}
		yy39:
			p++
			yych = l.input[p]
			switch yych {
			case 'o':
				goto yy49
			default:
				goto yy14
			}
		yy40:
			p++
			yych = l.input[p]
			switch yych {
			case 'l':
				goto yy50
			default:
				goto yy14
			}
		yy41:
			p++
			yych = l.input[p]
			switch yych {
			case 'b':
				goto yy51
			default:
				goto yy14
			}
		yy42:
			p++
			{
				token = PIPEAT
				break
			}
		yy44:
			p++
			{
				token = PIPE2
				break
			}
		yy46:
			p++
			yych = l.input[p]
			switch yych {
			case 'l':
				goto yy52
			default:
				goto yy14
			}
		yy47:
			p++
			yych = l.input[p]
			switch yych {
			case 'a':
				goto yy53
			default:
				goto yy14
			}
		yy48:
			p++
			yych = l.input[p]
			switch yych {
			case 'l':
				goto yy54
			default:
				goto yy14
			}
		yy49:
			p++
			yych = l.input[p]
			switch yych {
			case 'l':
				goto yy55
			default:
				goto yy14
			}
		yy50:
			p++
			yych = l.input[p]
			switch yych {
			case 'e':
				goto yy57
			default:
				goto yy14
			}
		yy51:
			p++
			yych = l.input[p]
			switch yych {
			case 'n':
				goto yy59
			default:
				goto yy14
			}
		yy52:
			p++
			yych = l.input[p]
			switch yych {
			case 'd':
				goto yy60
			default:
				goto yy14
			}
		yy53:
			p++
			yych = l.input[p]
			switch yych {
			case 'u':
				goto yy62
			default:
				goto yy14
			}
		yy54:
			p++
			yych = l.input[p]
			switch yych {
			case 'u':
				goto yy63
			default:
				goto yy14
			}
		yy55:
			p++
			yych = l.input[p]
			switch yych {
			case '-':
				fallthrough
			case '.':
				fallthrough
			case '0':
				fallthrough
			case '1':
				fallthrough
			case '2':
				fallthrough
			case '3':
				fallthrough
			case '4':
				fallthrough
			case '5':
				fallthrough
			case '6':
				fallthrough
			case '7':
				fallthrough
			case '8':
				fallthrough
			case '9':
				fallthrough
			case 'A':
				fallthrough
			case 'B':
				fallthrough
			case 'C':
				fallthrough
			case 'D':
				fallthrough
			case 'E':
				fallthrough
			case 'F':
				fallthrough
			case 'G':
				fallthrough
			case 'H':
				fallthrough
			case 'I':
				fallthrough
			case 'J':
				fallthrough
			case 'K':
				fallthrough
			case 'L':
				fallthrough
			case 'M':
				fallthrough
			case 'N':
				fallthrough
			case 'O':
				fallthrough
			case 'P':
				fallthrough
			case 'Q':
				fallthrough
			case 'R':
				fallthrough
			case 'S':
				fallthrough
			case 'T':
				fallthrough
			case 'U':
				fallthrough
			case 'V':
				fallthrough
			case 'W':
				fallthrough
			case 'X':
				fallthrough
			case 'Y':
				fallthrough
			case 'Z':
				fallthrough
			case '_':
				fallthrough
			case 'a':
				fallthrough
			case 'b':
				fallthrough
			case 'c':
				fallthrough
			case 'd':
				fallthrough
			case 'e':
				fallthrough
			case 'f':
				fallthrough
			case 'g':
				fallthrough
			case 'h':
				fallthrough
			case 'i':
				fallthrough
			case 'j':
				fallthrough
			case 'k':
				fallthrough
			case 'l':
				fallthrough
			case 'm':
				fallthrough
			case 'n':
				fallthrough
			case 'o':
				fallthrough
			case 'p':
				fallthrough
			case 'q':
				fallthrough
			case 'r':
				fallthrough
			case 's':
				fallthrough
			case 't':
				fallthrough
			case 'u':
				fallthrough
			case 'v':
				fallthrough
			case 'w':
				fallthrough
			case 'x':
				fallthrough
			case 'y':
				fallthrough
			case 'z':
				goto yy13
			default:
				goto yy56
			}
		yy56:
			{
				token = POOL
				break
			}
		yy57:
			p++
			yych = l.input[p]
			switch yych {
			case '-':
				fallthrough
			case '.':
				fallthrough
			case '0':
				fallthrough
			case '1':
				fallthrough
			case '2':
				fallthrough
			case '3':
				fallthrough
			case '4':
				fallthrough
			case '5':
				fallthrough
			case '6':
				fallthrough
			case '7':
				fallthrough
			case '8':
				fallthrough
			case '9':
				fallthrough
			case 'A':
				fallthrough
			case 'B':
				fallthrough
			case 'C':
				fallthrough
			case 'D':
				fallthrough
			case 'E':
				fallthrough
			case 'F':
				fallthrough
			case 'G':
				fallthrough
			case 'H':
				fallthrough
			case 'I':
				fallthrough
			case 'J':
				fallthrough
			case 'K':
				fallthrough
			case 'L':
				fallthrough
			case 'M':
				fallthrough
			case 'N':
				fallthrough
			case 'O':
				fallthrough
			case 'P':
				fallthrough
			case 'Q':
				fallthrough
			case 'R':
				fallthrough
			case 'S':
				fallthrough
			case 'T':
				fallthrough
			case 'U':
				fallthrough
			case 'V':
				fallthrough
			case 'W':
				fallthrough
			case 'X':
				fallthrough
			case 'Y':
				fallthrough
			case 'Z':
				fallthrough
			case '_':
				fallthrough
			case 'a':
				fallthrough
			case 'b':
				fallthrough
			case 'c':
				fallthrough
			case 'd':
				fallthrough
			case 'e':
				fallthrough
			case 'f':
				fallthrough
			case 'g':
				fallthrough
			case 'h':
				fallthrough
			case 'i':
				fallthrough
			case 'j':
				fallthrough
			case 'k':
				fallthrough
			case 'l':
				fallthrough
			case 'm':
				fallthrough
			case 'n':
				fallthrough
			case 'o':
				fallthrough
			case 'p':
				fallthrough
			case 'q':
				fallthrough
			case 'r':
				fallthrough
			case 's':
				fallthrough
			case 't':
				fallthrough
			case 'u':
				fallthrough
			case 'v':
				fallthrough
			case 'w':
				fallthrough
			case 'x':
				fallthrough
			case 'y':
				fallthrough
			case 'z':
				goto yy13
			default:
				goto yy58
			}
		yy58:
			{
				token = RULE
				break
			}
		yy59:
			p++
			yych = l.input[p]
			switch yych {
			case 'i':
				goto yy64
			default:
				goto yy14
			}
		yy60:
			p++
			yych = l.input[p]
			switch yych {
			case '-':
				fallthrough
			case '.':
				fallthrough
			case '0':
				fallthrough
			case '1':
				fallthrough
			case '2':
				fallthrough
			case '3':
				fallthrough
			case '4':
				fallthrough
			case '5':
				fallthrough
			case '6':
				fallthrough
			case '7':
				fallthrough
			case '8':
				fallthrough
			case '9':
				fallthrough
			case 'A':
				fallthrough
			case 'B':
				fallthrough
			case 'C':
				fallthrough
			case 'D':
				fallthrough
			case 'E':
				fallthrough
			case 'F':
				fallthrough
			case 'G':
				fallthrough
			case 'H':
				fallthrough
			case 'I':
				fallthrough
			case 'J':
				fallthrough
			case 'K':
				fallthrough
			case 'L':
				fallthrough
			case 'M':
				fallthrough
			case 'N':
				fallthrough
			case 'O':
				fallthrough
			case 'P':
				fallthrough
			case 'Q':
				fallthrough
			case 'R':
				fallthrough
			case 'S':
				fallthrough
			case 'T':
				fallthrough
			case 'U':
				fallthrough
			case 'V':
				fallthrough
			case 'W':
				fallthrough
			case 'X':
				fallthrough
			case 'Y':
				fallthrough
			case 'Z':
				fallthrough
			case '_':
				fallthrough
			case 'a':
				fallthrough
			case 'b':
				fallthrough
			case 'c':
				fallthrough
			case 'd':
				fallthrough
			case 'e':
				fallthrough
			case 'f':
				fallthrough
			case 'g':
				fallthrough
			case 'h':
				fallthrough
			case 'i':
				fallthrough
			case 'j':
				fallthrough
			case 'k':
				fallthrough
			case 'l':
				fallthrough
			case 'm':
				fallthrough
			case 'n':
				fallthrough
			case 'o':
				fallthrough
			case 'p':
				fallthrough
			case 'q':
				fallthrough
			case 'r':
				fallthrough
			case 's':
				fallthrough
			case 't':
				fallthrough
			case 'u':
				fallthrough
			case 'v':
				fallthrough
			case 'w':
				fallthrough
			case 'x':
				fallthrough
			case 'y':
				fallthrough
			case 'z':
				goto yy13
			default:
				goto yy61
			}
		yy61:
			{
				token = BUILD
				break
			}
		yy62:
			p++
			yych = l.input[p]
			switch yych {
			case 'l':
				goto yy65
			default:
				goto yy14
			}
		yy63:
			p++
			yych = l.input[p]
			switch yych {
			case 'd':
				goto yy66
			default:
				goto yy14
			}
		yy64:
			p++
			yych = l.input[p]
			switch yych {
			case 'n':
				goto yy67
			default:
				goto yy14
			}
		yy65:
			p++
			yych = l.input[p]
			switch yych {
			case 't':
				goto yy68
			default:
				goto yy14
			}
		yy66:
			p++
			yych = l.input[p]
			switch yych {
			case 'e':
				goto yy70
			default:
				goto yy14
			}
		yy67:
			p++
			yych = l.input[p]
			switch yych {
			case 'j':
				goto yy72
			default:
				goto yy14
			}
		yy68:
			p++
			yych = l.input[p]
			switch yych {
			case '-':
				fallthrough
			case '.':
				fallthrough
			case '0':
				fallthrough
			case '1':
				fallthrough
			case '2':
				fallthrough
			case '3':
				fallthrough
			case '4':
				fallthrough
			case '5':
				fallthrough
			case '6':
				fallthrough
			case '7':
				fallthrough
			case '8':
				fallthrough
			case '9':
				fallthrough
			case 'A':
				fallthrough
			case 'B':
				fallthrough
			case 'C':
				fallthrough
			case 'D':
				fallthrough
			case 'E':
				fallthrough
			case 'F':
				fallthrough
			case 'G':
				fallthrough
			case 'H':
				fallthrough
			case 'I':
				fallthrough
			case 'J':
				fallthrough
			case 'K':
				fallthrough
			case 'L':
				fallthrough
			case 'M':
				fallthrough
			case 'N':
				fallthrough
			case 'O':
				fallthrough
			case 'P':
				fallthrough
			case 'Q':
				fallthrough
			case 'R':
				fallthrough
			case 'S':
				fallthrough
			case 'T':
				fallthrough
			case 'U':
				fallthrough
			case 'V':
				fallthrough
			case 'W':
				fallthrough
			case 'X':
				fallthrough
			case 'Y':
				fallthrough
			case 'Z':
				fallthrough
			case '_':
				fallthrough
			case 'a':
				fallthrough
			case 'b':
				fallthrough
			case 'c':
				fallthrough
			case 'd':
				fallthrough
			case 'e':
				fallthrough
			case 'f':
				fallthrough
			case 'g':
				fallthrough
			case 'h':
				fallthrough
			case 'i':
				fallthrough
			case 'j':
				fallthrough
			case 'k':
				fallthrough
			case 'l':
				fallthrough
			case 'm':
				fallthrough
			case 'n':
				fallthrough
			case 'o':
				fallthrough
			case 'p':
				fallthrough
			case 'q':
				fallthrough
			case 'r':
				fallthrough
			case 's':
				fallthrough
			case 't':
				fallthrough
			case 'u':
				fallthrough
			case 'v':
				fallthrough
			case 'w':
				fallthrough
			case 'x':
				fallthrough
			case 'y':
				fallthrough
			case 'z':
				goto yy13
			default:
				goto yy69
			}
		yy69:
			{
				token = DEFAULT
				break
			}
		yy70:
			p++
			yych = l.input[p]
			switch yych {
			case '-':
				fallthrough
			case '.':
				fallthrough
			case '0':
				fallthrough
			case '1':
				fallthrough
			case '2':
				fallthrough
			case '3':
				fallthrough
			case '4':
				fallthrough
			case '5':
				fallthrough
			case '6':
				fallthrough
			case '7':
				fallthrough
			case '8':
				fallthrough
			case '9':
				fallthrough
			case 'A':
				fallthrough
			case 'B':
				fallthrough
			case 'C':
				fallthrough
			case 'D':
				fallthrough
			case 'E':
				fallthrough
			case 'F':
				fallthrough
			case 'G':
				fallthrough
			case 'H':
				fallthrough
			case 'I':
				fallthrough
			case 'J':
				fallthrough
			case 'K':
				fallthrough
			case 'L':
				fallthrough
			case 'M':
				fallthrough
			case 'N':
				fallthrough
			case 'O':
				fallthrough
			case 'P':
				fallthrough
			case 'Q':
				fallthrough
			case 'R':
				fallthrough
			case 'S':
				fallthrough
			case 'T':
				fallthrough
			case 'U':
				fallthrough
			case 'V':
				fallthrough
			case 'W':
				fallthrough
			case 'X':
				fallthrough
			case 'Y':
				fallthrough
			case 'Z':
				fallthrough
			case '_':
				fallthrough
			case 'a':
				fallthrough
			case 'b':
				fallthrough
			case 'c':
				fallthrough
			case 'd':
				fallthrough
			case 'e':
				fallthrough
			case 'f':
				fallthrough
			case 'g':
				fallthrough
			case 'h':
				fallthrough
			case 'i':
				fallthrough
			case 'j':
				fallthrough
			case 'k':
				fallthrough
			case 'l':
				fallthrough
			case 'm':
				fallthrough
			case 'n':
				fallthrough
			case 'o':
				fallthrough
			case 'p':
				fallthrough
			case 'q':
				fallthrough
			case 'r':
				fallthrough
			case 's':
				fallthrough
			case 't':
				fallthrough
			case 'u':
				fallthrough
			case 'v':
				fallthrough
			case 'w':
				fallthrough
			case 'x':
				fallthrough
			case 'y':
				fallthrough
			case 'z':
				goto yy13
			default:
				goto yy71
			}
		yy71:
			{
				token = INCLUDE
				break
			}
		yy72:
			p++
			yych = l.input[p]
			switch yych {
			case 'a':
				goto yy73
			default:
				goto yy14
			}
		yy73:
			p++
			yych = l.input[p]
			switch yych {
			case '-':
				fallthrough
			case '.':
				fallthrough
			case '0':
				fallthrough
			case '1':
				fallthrough
			case '2':
				fallthrough
			case '3':
				fallthrough
			case '4':
				fallthrough
			case '5':
				fallthrough
			case '6':
				fallthrough
			case '7':
				fallthrough
			case '8':
				fallthrough
			case '9':
				fallthrough
			case 'A':
				fallthrough
			case 'B':
				fallthrough
			case 'C':
				fallthrough
			case 'D':
				fallthrough
			case 'E':
				fallthrough
			case 'F':
				fallthrough
			case 'G':
				fallthrough
			case 'H':
				fallthrough
			case 'I':
				fallthrough
			case 'J':
				fallthrough
			case 'K':
				fallthrough
			case 'L':
				fallthrough
			case 'M':
				fallthrough
			case 'N':
				fallthrough
			case 'O':
				fallthrough
			case 'P':
				fallthrough
			case 'Q':
				fallthrough
			case 'R':
				fallthrough
			case 'S':
				fallthrough
			case 'T':
				fallthrough
			case 'U':
				fallthrough
			case 'V':
				fallthrough
			case 'W':
				fallthrough
			case 'X':
				fallthrough
			case 'Y':
				fallthrough
			case 'Z':
				fallthrough
			case '_':
				fallthrough
			case 'a':
				fallthrough
			case 'b':
				fallthrough
			case 'c':
				fallthrough
			case 'd':
				fallthrough
			case 'e':
				fallthrough
			case 'f':
				fallthrough
			case 'g':
				fallthrough
			case 'h':
				fallthrough
			case 'i':
				fallthrough
			case 'j':
				fallthrough
			case 'k':
				fallthrough
			case 'l':
				fallthrough
			case 'm':
				fallthrough
			case 'n':
				fallthrough
			case 'o':
				fallthrough
			case 'p':
				fallthrough
			case 'q':
				fallthrough
			case 'r':
				fallthrough
			case 's':
				fallthrough
			case 't':
				fallthrough
			case 'u':
				fallthrough
			case 'v':
				fallthrough
			case 'w':
				fallthrough
			case 'x':
				fallthrough
			case 'y':
				fallthrough
			case 'z':
				goto yy13
			default:
				goto yy74
			}
		yy74:
			{
				token = SUBNINJA
				break
			}
		}

	}

	l.lastToken = start
	l.ofs = p
	if token != NEWLINE && token != TEOF {
		l.eatWhitespace()
	}
	return token
}

// If the next token is \a token, read it and return true.
func (l *lexer) PeekToken(token Token) bool {
	t := l.ReadToken()
	if t == token {
		return true
	}
	l.UnreadToken()
	return false
}

// Skip past whitespace (called after each read token/ident/etc.).
func (l *lexer) eatWhitespace() {
	p := l.ofs
	q := 0
	for {
		l.ofs = p

		{
			var yych byte
			yych = l.input[p]
			switch yych {
			case 0x00:
				goto yy77
			case ' ':
				goto yy81
			case '$':
				goto yy84
			default:
				goto yy79
			}
		yy77:
			p++
			{
				break
			}
		yy79:
			p++
		yy80:
			{
				break
			}
		yy81:
			p++
			yych = l.input[p]
			switch yych {
			case ' ':
				goto yy81
			default:
				goto yy83
			}
		yy83:
			{
				continue
			}
		yy84:
			p++
			q = p
			yych = l.input[p]
			switch yych {
			case '\n':
				goto yy85
			case '\r':
				goto yy87
			default:
				goto yy80
			}
		yy85:
			p++
			{
				continue
			}
		yy87:
			p++
			yych = l.input[p]
			switch yych {
			case '\n':
				goto yy89
			default:
				goto yy88
			}
		yy88:
			p = q
			goto yy80
		yy89:
			p++
			{
				continue
			}
		}

	}
}

// Read a simple identifier (a rule or variable name).
// Returns false if a name can't be read.
func (l *lexer) ReadIdent(out *string) bool {
	p := l.ofs
	start := 0
	for {
		start = p

		{
			var yych byte
			yych = l.input[p]
			switch yych {
			case '-':
				fallthrough
			case '.':
				fallthrough
			case '0':
				fallthrough
			case '1':
				fallthrough
			case '2':
				fallthrough
			case '3':
				fallthrough
			case '4':
				fallthrough
			case '5':
				fallthrough
			case '6':
				fallthrough
			case '7':
				fallthrough
			case '8':
				fallthrough
			case '9':
				fallthrough
			case 'A':
				fallthrough
			case 'B':
				fallthrough
			case 'C':
				fallthrough
			case 'D':
				fallthrough
			case 'E':
				fallthrough
			case 'F':
				fallthrough
			case 'G':
				fallthrough
			case 'H':
				fallthrough
			case 'I':
				fallthrough
			case 'J':
				fallthrough
			case 'K':
				fallthrough
			case 'L':
				fallthrough
			case 'M':
				fallthrough
			case 'N':
				fallthrough
			case 'O':
				fallthrough
			case 'P':
				fallthrough
			case 'Q':
				fallthrough
			case 'R':
				fallthrough
			case 'S':
				fallthrough
			case 'T':
				fallthrough
			case 'U':
				fallthrough
			case 'V':
				fallthrough
			case 'W':
				fallthrough
			case 'X':
				fallthrough
			case 'Y':
				fallthrough
			case 'Z':
				fallthrough
			case '_':
				fallthrough
			case 'a':
				fallthrough
			case 'b':
				fallthrough
			case 'c':
				fallthrough
			case 'd':
				fallthrough
			case 'e':
				fallthrough
			case 'f':
				fallthrough
			case 'g':
				fallthrough
			case 'h':
				fallthrough
			case 'i':
				fallthrough
			case 'j':
				fallthrough
			case 'k':
				fallthrough
			case 'l':
				fallthrough
			case 'm':
				fallthrough
			case 'n':
				fallthrough
			case 'o':
				fallthrough
			case 'p':
				fallthrough
			case 'q':
				fallthrough
			case 'r':
				fallthrough
			case 's':
				fallthrough
			case 't':
				fallthrough
			case 'u':
				fallthrough
			case 'v':
				fallthrough
			case 'w':
				fallthrough
			case 'x':
				fallthrough
			case 'y':
				fallthrough
			case 'z':
				goto yy95
			default:
				goto yy93
			}
		yy93:
			p++
			{
				l.lastToken = start
				return false
			}
		yy95:
			p++
			yych = l.input[p]
			switch yych {
			case '-':
				fallthrough
			case '.':
				fallthrough
			case '0':
				fallthrough
			case '1':
				fallthrough
			case '2':
				fallthrough
			case '3':
				fallthrough
			case '4':
				fallthrough
			case '5':
				fallthrough
			case '6':
				fallthrough
			case '7':
				fallthrough
			case '8':
				fallthrough
			case '9':
				fallthrough
			case 'A':
				fallthrough
			case 'B':
				fallthrough
			case 'C':
				fallthrough
			case 'D':
				fallthrough
			case 'E':
				fallthrough
			case 'F':
				fallthrough
			case 'G':
				fallthrough
			case 'H':
				fallthrough
			case 'I':
				fallthrough
			case 'J':
				fallthrough
			case 'K':
				fallthrough
			case 'L':
				fallthrough
			case 'M':
				fallthrough
			case 'N':
				fallthrough
			case 'O':
				fallthrough
			case 'P':
				fallthrough
			case 'Q':
				fallthrough
			case 'R':
				fallthrough
			case 'S':
				fallthrough
			case 'T':
				fallthrough
			case 'U':
				fallthrough
			case 'V':
				fallthrough
			case 'W':
				fallthrough
			case 'X':
				fallthrough
			case 'Y':
				fallthrough
			case 'Z':
				fallthrough
			case '_':
				fallthrough
			case 'a':
				fallthrough
			case 'b':
				fallthrough
			case 'c':
				fallthrough
			case 'd':
				fallthrough
			case 'e':
				fallthrough
			case 'f':
				fallthrough
			case 'g':
				fallthrough
			case 'h':
				fallthrough
			case 'i':
				fallthrough
			case 'j':
				fallthrough
			case 'k':
				fallthrough
			case 'l':
				fallthrough
			case 'm':
				fallthrough
			case 'n':
				fallthrough
			case 'o':
				fallthrough
			case 'p':
				fallthrough
			case 'q':
				fallthrough
			case 'r':
				fallthrough
			case 's':
				fallthrough
			case 't':
				fallthrough
			case 'u':
				fallthrough
			case 'v':
				fallthrough
			case 'w':
				fallthrough
			case 'x':
				fallthrough
			case 'y':
				fallthrough
			case 'z':
				goto yy95
			default:
				goto yy97
			}
		yy97:
			{
				*out = unsafeString(l.input[start:p])
				break
			}
		}

	}
	l.lastToken = start
	l.ofs = p
	l.eatWhitespace()
	return true
}

// readEvalString reads a $-escaped string.
//
// If path is true, read a path (complete with $escapes).
//
// If path is false, read the value side of a var = value line (complete with
// $escapes).
//
// Returned path may be empty if a delimiter (space, newline) is hit.
func (l *lexer) readEvalString(path bool) (EvalString, error) {
	eval := EvalString{}
	p := l.ofs
	q := 0
	start := 0
	for {
		start = p

		{
			var yych byte
			yych = l.input[p]
			switch yych {
			case 0x00:
				goto yy100
			case '\n':
				fallthrough
			case ' ':
				fallthrough
			case ':':
				fallthrough
			case '|':
				goto yy105
			case '\r':
				goto yy107
			case '$':
				goto yy109
			default:
				goto yy102
			}
		yy100:
			p++
			{
				l.lastToken = start
				return eval, l.Error("unexpected EOF")
			}
		yy102:
			p++
			yych = l.input[p]
			switch yych {
			case 0x00:
				fallthrough
			case '\n':
				fallthrough
			case '\r':
				fallthrough
			case ' ':
				fallthrough
			case '$':
				fallthrough
			case ':':
				fallthrough
			case '|':
				goto yy104
			default:
				goto yy102
			}
		yy104:
			{
				eval.Parsed = append(eval.Parsed, EvalStringToken{unsafeString(l.input[start:p]), false})
				continue
			}
		yy105:
			p++
			{
				if path {
					p = start
					break
				} else {
					if l.input[start] == '\n' {
						break
					}
					eval.Parsed = append(eval.Parsed, EvalStringToken{unsafeString(l.input[start : start+1]), false})
					continue
				}
			}
		yy107:
			p++
			yych = l.input[p]
			switch yych {
			case '\n':
				goto yy110
			default:
				goto yy108
			}
		yy108:
			{
				l.lastToken = start
				return eval, l.Error(l.DescribeLastError())
			}
		yy109:
			p++
			yych = l.input[p]
			switch yych {
			case '\n':
				goto yy114
			case '\r':
				goto yy117
			case ' ':
				goto yy118
			case '$':
				goto yy120
			case '-':
				fallthrough
			case '0':
				fallthrough
			case '1':
				fallthrough
			case '2':
				fallthrough
			case '3':
				fallthrough
			case '4':
				fallthrough
			case '5':
				fallthrough
			case '6':
				fallthrough
			case '7':
				fallthrough
			case '8':
				fallthrough
			case '9':
				fallthrough
			case 'A':
				fallthrough
			case 'B':
				fallthrough
			case 'C':
				fallthrough
			case 'D':
				fallthrough
			case 'E':
				fallthrough
			case 'F':
				fallthrough
			case 'G':
				fallthrough
			case 'H':
				fallthrough
			case 'I':
				fallthrough
			case 'J':
				fallthrough
			case 'K':
				fallthrough
			case 'L':
				fallthrough
			case 'M':
				fallthrough
			case 'N':
				fallthrough
			case 'O':
				fallthrough
			case 'P':
				fallthrough
			case 'Q':
				fallthrough
			case 'R':
				fallthrough
			case 'S':
				fallthrough
			case 'T':
				fallthrough
			case 'U':
				fallthrough
			case 'V':
				fallthrough
			case 'W':
				fallthrough
			case 'X':
				fallthrough
			case 'Y':
				fallthrough
			case 'Z':
				fallthrough
			case '_':
				fallthrough
			case 'a':
				fallthrough
			case 'b':
				fallthrough
			case 'c':
				fallthrough
			case 'd':
				fallthrough
			case 'e':
				fallthrough
			case 'f':
				fallthrough
			case 'g':
				fallthrough
			case 'h':
				fallthrough
			case 'i':
				fallthrough
			case 'j':
				fallthrough
			case 'k':
				fallthrough
			case 'l':
				fallthrough
			case 'm':
				fallthrough
			case 'n':
				fallthrough
			case 'o':
				fallthrough
			case 'p':
				fallthrough
			case 'q':
				fallthrough
			case 'r':
				fallthrough
			case 's':
				fallthrough
			case 't':
				fallthrough
			case 'u':
				fallthrough
			case 'v':
				fallthrough
			case 'w':
				fallthrough
			case 'x':
				fallthrough
			case 'y':
				fallthrough
			case 'z':
				goto yy122
			case ':':
				goto yy125
			case '{':
				goto yy127
			default:
				goto yy112
			}
		yy110:
			p++
			{
				if path {
					p = start
				}
				break
			}
		yy112:
			p++
		yy113:
			{
				l.lastToken = start
				return eval, l.Error("bad $-escape (literal $ must be written as $$)")
			}
		yy114:
			p++
			yych = l.input[p]
			switch yych {
			case ' ':
				goto yy114
			default:
				goto yy116
			}
		yy116:
			{
				continue
			}
		yy117:
			p++
			yych = l.input[p]
			switch yych {
			case '\n':
				goto yy128
			default:
				goto yy113
			}
		yy118:
			p++
			{
				eval.Parsed = append(eval.Parsed, EvalStringToken{" ", false})
				continue
			}
		yy120:
			p++
			{
				eval.Parsed = append(eval.Parsed, EvalStringToken{"$", false})
				continue
			}
		yy122:
			p++
			yych = l.input[p]
			switch yych {
			case '-':
				fallthrough
			case '0':
				fallthrough
			case '1':
				fallthrough
			case '2':
				fallthrough
			case '3':
				fallthrough
			case '4':
				fallthrough
			case '5':
				fallthrough
			case '6':
				fallthrough
			case '7':
				fallthrough
			case '8':
				fallthrough
			case '9':
				fallthrough
			case 'A':
				fallthrough
			case 'B':
				fallthrough
			case 'C':
				fallthrough
			case 'D':
				fallthrough
			case 'E':
				fallthrough
			case 'F':
				fallthrough
			case 'G':
				fallthrough
			case 'H':
				fallthrough
			case 'I':
				fallthrough
			case 'J':
				fallthrough
			case 'K':
				fallthrough
			case 'L':
				fallthrough
			case 'M':
				fallthrough
			case 'N':
				fallthrough
			case 'O':
				fallthrough
			case 'P':
				fallthrough
			case 'Q':
				fallthrough
			case 'R':
				fallthrough
			case 'S':
				fallthrough
			case 'T':
				fallthrough
			case 'U':
				fallthrough
			case 'V':
				fallthrough
			case 'W':
				fallthrough
			case 'X':
				fallthrough
			case 'Y':
				fallthrough
			case 'Z':
				fallthrough
			case '_':
				fallthrough
			case 'a':
				fallthrough
			case 'b':
				fallthrough
			case 'c':
				fallthrough
			case 'd':
				fallthrough
			case 'e':
				fallthrough
			case 'f':
				fallthrough
			case 'g':
				fallthrough
			case 'h':
				fallthrough
			case 'i':
				fallthrough
			case 'j':
				fallthrough
			case 'k':
				fallthrough
			case 'l':
				fallthrough
			case 'm':
				fallthrough
			case 'n':
				fallthrough
			case 'o':
				fallthrough
			case 'p':
				fallthrough
			case 'q':
				fallthrough
			case 'r':
				fallthrough
			case 's':
				fallthrough
			case 't':
				fallthrough
			case 'u':
				fallthrough
			case 'v':
				fallthrough
			case 'w':
				fallthrough
			case 'x':
				fallthrough
			case 'y':
				fallthrough
			case 'z':
				goto yy122
			default:
				goto yy124
			}
		yy124:
			{
				eval.Parsed = append(eval.Parsed, EvalStringToken{unsafeString(l.input[start+1 : p]), true})
				continue
			}
		yy125:
			p++
			{
				eval.Parsed = append(eval.Parsed, EvalStringToken{":", false})
				continue
			}
		yy127:
			p++
			q = p
			yych = l.input[p]
			switch yych {
			case '-':
				fallthrough
			case '.':
				fallthrough
			case '0':
				fallthrough
			case '1':
				fallthrough
			case '2':
				fallthrough
			case '3':
				fallthrough
			case '4':
				fallthrough
			case '5':
				fallthrough
			case '6':
				fallthrough
			case '7':
				fallthrough
			case '8':
				fallthrough
			case '9':
				fallthrough
			case 'A':
				fallthrough
			case 'B':
				fallthrough
			case 'C':
				fallthrough
			case 'D':
				fallthrough
			case 'E':
				fallthrough
			case 'F':
				fallthrough
			case 'G':
				fallthrough
			case 'H':
				fallthrough
			case 'I':
				fallthrough
			case 'J':
				fallthrough
			case 'K':
				fallthrough
			case 'L':
				fallthrough
			case 'M':
				fallthrough
			case 'N':
				fallthrough
			case 'O':
				fallthrough
			case 'P':
				fallthrough
			case 'Q':
				fallthrough
			case 'R':
				fallthrough
			case 'S':
				fallthrough
			case 'T':
				fallthrough
			case 'U':
				fallthrough
			case 'V':
				fallthrough
			case 'W':
				fallthrough
			case 'X':
				fallthrough
			case 'Y':
				fallthrough
			case 'Z':
				fallthrough
			case '_':
				fallthrough
			case 'a':
				fallthrough
			case 'b':
				fallthrough
			case 'c':
				fallthrough
			case 'd':
				fallthrough
			case 'e':
				fallthrough
			case 'f':
				fallthrough
			case 'g':
				fallthrough
			case 'h':
				fallthrough
			case 'i':
				fallthrough
			case 'j':
				fallthrough
			case 'k':
				fallthrough
			case 'l':
				fallthrough
			case 'm':
				fallthrough
			case 'n':
				fallthrough
			case 'o':
				fallthrough
			case 'p':
				fallthrough
			case 'q':
				fallthrough
			case 'r':
				fallthrough
			case 's':
				fallthrough
			case 't':
				fallthrough
			case 'u':
				fallthrough
			case 'v':
				fallthrough
			case 'w':
				fallthrough
			case 'x':
				fallthrough
			case 'y':
				fallthrough
			case 'z':
				goto yy131
			default:
				goto yy113
			}
		yy128:
			p++
			yych = l.input[p]
			switch yych {
			case ' ':
				goto yy128
			default:
				goto yy130
			}
		yy130:
			{
				continue
			}
		yy131:
			p++
			yych = l.input[p]
			switch yych {
			case '-':
				fallthrough
			case '.':
				fallthrough
			case '0':
				fallthrough
			case '1':
				fallthrough
			case '2':
				fallthrough
			case '3':
				fallthrough
			case '4':
				fallthrough
			case '5':
				fallthrough
			case '6':
				fallthrough
			case '7':
				fallthrough
			case '8':
				fallthrough
			case '9':
				fallthrough
			case 'A':
				fallthrough
			case 'B':
				fallthrough
			case 'C':
				fallthrough
			case 'D':
				fallthrough
			case 'E':
				fallthrough
			case 'F':
				fallthrough
			case 'G':
				fallthrough
			case 'H':
				fallthrough
			case 'I':
				fallthrough
			case 'J':
				fallthrough
			case 'K':
				fallthrough
			case 'L':
				fallthrough
			case 'M':
				fallthrough
			case 'N':
				fallthrough
			case 'O':
				fallthrough
			case 'P':
				fallthrough
			case 'Q':
				fallthrough
			case 'R':
				fallthrough
			case 'S':
				fallthrough
			case 'T':
				fallthrough
			case 'U':
				fallthrough
			case 'V':
				fallthrough
			case 'W':
				fallthrough
			case 'X':
				fallthrough
			case 'Y':
				fallthrough
			case 'Z':
				fallthrough
			case '_':
				fallthrough
			case 'a':
				fallthrough
			case 'b':
				fallthrough
			case 'c':
				fallthrough
			case 'd':
				fallthrough
			case 'e':
				fallthrough
			case 'f':
				fallthrough
			case 'g':
				fallthrough
			case 'h':
				fallthrough
			case 'i':
				fallthrough
			case 'j':
				fallthrough
			case 'k':
				fallthrough
			case 'l':
				fallthrough
			case 'm':
				fallthrough
			case 'n':
				fallthrough
			case 'o':
				fallthrough
			case 'p':
				fallthrough
			case 'q':
				fallthrough
			case 'r':
				fallthrough
			case 's':
				fallthrough
			case 't':
				fallthrough
			case 'u':
				fallthrough
			case 'v':
				fallthrough
			case 'w':
				fallthrough
			case 'x':
				fallthrough
			case 'y':
				fallthrough
			case 'z':
				goto yy131
			case '}':
				goto yy134
			default:
				goto yy133
			}
		yy133:
			p = q
			goto yy113
		yy134:
			p++
			{
				eval.Parsed = append(eval.Parsed, EvalStringToken{unsafeString(l.input[start+2 : p-1]), true})
				continue
			}
		}

	}
	l.lastToken = start
	l.ofs = p
	if path {
		l.eatWhitespace()
	}
	// Non-path strings end in newlines, so there's no whitespace to eat.
	return eval, nil
}
