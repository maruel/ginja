# Copyright 2020 Marc-Antoine Ruel. All rights reserved.
# Use of this source code is governed under the Apache License, Version 2.0
# that can be found in the LICENSE file.

# References:
# https://developer.github.com/webhooks/event-payloads/
# https://github.com/actions/cache
# https://github.com/actions/checkout
# https://github.com/actions/setup-go
# https://help.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token#using-the-github_token-in-a-workflow
# https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions/
# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions

on: [push, pull_request]
name: Run tests
jobs:
  test_all:
    continue-on-error: true
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # Do not forget to bump every 6 months!
        gover: ["1.17"]
    runs-on: "${{matrix.os}}"
    name: "go${{matrix.gover}}.x on ${{matrix.os}}"
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: "${{matrix.gover}}"

      # Checkout and print debugging information.
    - name: Turn off git core.autocrlf
      run: git config --global core.autocrlf false
    - uses: actions/checkout@v2
    - name: "Debug"
      run: |
        echo HOME = $HOME
        echo GITHUB_WORKSPACE = $GITHUB_WORKSPACE
        echo PATH = $PATH
        echo ""
        echo $ ls -l $HOME/go/bin
        ls -la $HOME/go/bin

    - name: 'Cache: ~/go'
      uses: actions/cache@v2
      with:
        path: ~/go
        key: "${{runner.os}}-gopkg-${{hashFiles('go.sum', '.github/workflows/*.yml')}}"

      # Run tests first because it's important.
    - name: 'Check: go test -cover'
      run: go test -timeout=120s -covermode=count -coverprofile coverage.txt ./...
    - uses: codecov/codecov-action@v2
    - name: 'Cleanup'
      if: always()
      run: rm coverage.txt

      # TODO(maruel): Skip -race for now because it's using too much memory.
      # Don't run go test -race if anything failed, to speed up the results.
#    - name: 'Check: go test -race'
#      run: go test -timeout=120s -race ./...
    - name: 'Check: go test -bench=.'
      run: go test -timeout=120s -bench=. -benchtime=100ms -cpu=1  -run NONE ./...

    - name: "Check: tree is clean"
      if: always()
      run: |
        # Nothing should have changed in the tree up to that point and no
        # unsuspected file was created.
        TOUCHED=$(git status --porcelain --ignored)
        if ! test -z "$TOUCHED"; then
          echo "Oops, something touched these files, please cleanup:"
          echo "$TOUCHED"
          git diff
          false
        fi

    - name: "Check: go generate doesn't modify files"
      if: always()
      run: |
        go generate ./...
        # Also test for untracked files.
        TOUCHED=$(git status --porcelain --ignored)
        if ! test -z "$TOUCHED"; then
          echo "go generate created these files, please fix:"
          echo "$TOUCHED"
          false
        fi

    - name: "Check: go mod tidy doesn't modify files"
      if: always()
      run: |
        go mod tidy
        TOUCHED=$(git status --porcelain --ignored)
        if ! test -z "$TOUCHED"; then
          echo "go mod tidy was not clean, please update:"
          git diff
          false
        fi

      # Run compare.sh.
    - name: 'compare.sh'
      if: always() && matrix.os == 'ubuntu-latest'
      run: ./compare.sh

      # Fetch the tools.
    - name: 'go get necessary tools'
      if: always()
      run: >
        cd ..;
        go get -u -v
        github.com/gordonklaus/ineffassign
        github.com/securego/gosec/cmd/gosec
        golang.org/x/lint/golint
        golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow
        honnef.co/go/tools/cmd/staticcheck
    - name: 'go get necessary tools (ubuntu)'
      if: always() && matrix.os == 'ubuntu-latest'
      run: >
        cd ..;
        go get -u -v
        github.com/client9/misspell/cmd/misspell
        github.com/google/addlicense

      # Now run proper checks.
    - name: 'Check: go vet'
      if: always()
      run: go vet ./...
    - name: 'Check: go vet shadow; shadowed variables'
      run: |
        SHADOW_TOOL="$(which shadow)"
        if [ -f "${SHADOW_TOOL}.exe" ]; then
          SHADOW_TOOL="${SHADOW_TOOL}.exe"
        fi
        go vet -vettool=$SHADOW_TOOL ./...
    - name: 'Check: golint'
      if: always()
      # May fix later, but not now: -set_exit_status
      run: golint ./...
    - name: 'Check: inefficient variable assignment'
      if: always()
      run: ineffassign .
    - name: 'Check: staticcheck'
      if: always()
      # Disable a few checks for now:
      # - ST1017: Yoda check since the unit tests use this form by default. May
      #   fix later.
      # - U1000: field or variable is unused, some is because the code is
      #   currently commented out. Will clean up later.
      # - SA4006: value of variable is never used. May clean up later but
      #   there's one false positive so it may be tricky.
      run: staticcheck -checks "inherit,-ST1017,-U1000,-SA4006" ./...
    - name: 'Check: gosec (only G104)'
      run: gosec -include=G104 -fmt=golint -quiet ./...

      # The following checks are not dependent on the OS or go build tags. Only
      # run them on ubuntu-latest since it's the fastest one.
#    - name: 'Check: no executable was committed (ubuntu)'
#      if: always() && matrix.os == 'ubuntu-latest'
#      # Ignore python files since a lot of the support scripts are in python.
#      # May change later if we get rid of them.
#      run: |
#        if find . -path '*.py' -prune -o -path '*.sh' -prune -o -path ./.git -prune -o -type f -executable -print | grep -e . ; then
#          echo 'Do not commit executables beside shell scripts'
#          false
#        fi
    - name: 'Check: gofmt; code is well formatted (ubuntu)'
      if: always() && matrix.os == 'ubuntu-latest'
      run: |
        FILES=$(gofmt -s -l .)
        if ! test -z "$FILES"; then
          echo 'Please run `gofmt -s -w` on the following files:' >> _gofmt.txt
          echo "" >> _gofmt.txt
          for FILE in ${FILES}; do
            echo "- ${FILE}" >> _gofmt.txt
          done
          cat _gofmt.txt
          echo "## ⚠ gofmt Failed" >> _comments.txt
          echo "" >> _comments.txt
          cat _gofmt.txt >> _comments.txt
          echo "" >> _comments.txt
          false
        fi
    - name: 'Check: addlicense; all sources have a license header (ubuntu)'
      if: always() && matrix.os == 'ubuntu-latest'
      # Since the original C++ code doesn't have consistent copyright headers,
      # only check the Go code.
      run: addlicense -check $(git ls-files -- "*.go")
    - name: "Check: misspelling; code doesn't contain misspelling (ubuntu)"
      if: always() && matrix.os == 'ubuntu-latest'
      # Temporarily only check misspelling on Go code. I sent a PR to fix two
      # typos upstream https://github.com/ninja-build/ninja/pull/2062
      run: |
        ERR=$(misspell $(git ls-files -- "*.go"))
        if ! test -z "$ERR"; then
          echo "$ERR"
          echo "## ⚠ misspell Failed" >> _comments.txt
          echo "" >> _comments.txt
          echo "$ERR" >> _comments.txt
          echo "" >> _comments.txt
          false
        fi

    - name: 'Send comments'
      if: failure() && github.event_name == 'pull_request'
      run: |
        if [ -f _comments.txt ]; then
          URL=$(cat ${GITHUB_EVENT_PATH} | jq -r .pull_request.comments_url)
          echo "Sending $(cat _comments.txt|wc -l) lines of comments to ${URL}"
          PAYLOAD=$(echo '{}' | jq --arg body "$(cat _comments.txt)" '.body = $body')
          curl -sS --request POST \
            --header "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" \
            --header "Content-Type: application/json" \
            --data "${PAYLOAD}" "${URL}" > /dev/null
        fi

  test_32bits:
    env:
      GOARCH: 386
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        # Do not forget to bump every 6 months!
        gover: ["1.17"]
    runs-on: ubuntu-latest
    name: "go${{matrix.gover}}.x on ubuntu-latest 32 bits (quick)"
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: "${{matrix.gover}}"
    - uses: actions/checkout@v2
    - name: 'Check: go test'
      run: go test -timeout=40s ./...
